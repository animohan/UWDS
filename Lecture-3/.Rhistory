# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
(572+1731)/(572+1731+381+211)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
head(Students)
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
PartitionExact <- function(dataSet, fractionOfTest = 0.3)
{
# ********** Add code here
numberOfRows = nrow(dataSet)
numberOfTestRows = fractionOfTest*numberOfRows
testFlag = sample(numberOfRows, numberOfTestRows)
testingData = dataSet[testFlag]
trainingData = dataSet[!testFlag]
dataSetSplit <- list(trainingData=trainingData, testingData=testingData)
return(dataSetSplit)
}
a = PartitionExact(Students,fractionOfTest = 0.4)
dataSet= Students
numberOfRows = nrow(dataSet)
numberOfTestRows = fractionOfTest*numberOfRows
dataSet= Students
fractionOfTest = 0.4
numberOfRows = nrow(dataSet)
numberOfTestRows = fractionOfTest*numberOfRows
testFlag = sample(numberOfRows, numberOfTestRows)
testingData = dataSet[testFlag]
testFlag
testFlag = if(sample(numberOfRows, numberOfTestRows, TRUE, FALSE)
)
)
testFlag = if(sample(numberOfRows, numberOfTestRows), TRUE, FALSE)
testFlag = sample(numberOfRows, numberOfTestRows)
dataSet[testFlag]
?sample
head(dataSet)
dataSet[testFlag]
dataSet[-testFlag]
dim(dataSet[-testFlag])
dim(Students)
testingData = sample(1:nrow(Students), numberOfTestRows)
dim(testingData)
head(testingData)
flag= sample(1:nrow(Students), numberOfTestRows)
flag
train = -test
test= sample(1:nrow(Students), numberOfTestRows)
train = -test
train
train = (-test)
test= sample(1:nrow(Students), numberOfTestRows)
train = (-test)
test
train
Students[test]
Students[test,]
dim(Students[test,])
dataSet= Students
fractionOfTest = 0.4
numberOfRows = nrow(dataSet)
numberOfTestRows = fractionOfTest*numberOfRows
test= sample(1:nrow(Students), numberOfTestRows)
testingData = dataSet[testFlag,]
trainingData = dataSet[!testFlag,]
dim(testingData)
dim(trainingData)
trainingData = dataSet[-testFlag,]
dim(trainingData)
dim(Students)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
(679+1716)/(679+1716+212+273)
(679+1716+212+273)
dim(Students)
7200*.4
(934 + 1071)/(934 + 759 + 116 + 1071)
(934 + 759 + 116 + 1071)
(691+1715)/(691+227+262+1715)
(572+1731)/(572+1731+381+211)
(679+1716)/(679+1716+212+273)
(551+1720)/(551+1720+401+208)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.7
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.7
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
(463+1840)/(463+1840+88+489)
(397+1839)/(397+1839+89+555)
(325 + 1103)/(325 + 1368 + 84 + 1103)
(934 + 1071)/(934 + 759 + 116 + 1071)
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionFast(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
# ClassifyStudents.R
# Copyright 2016 by Ernst Henle
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.5
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
# ClassifyStudents.R
# Copyright 2016 by Ernst Henle
# Clear objects from Memory
rm(list=ls())
# Clear Console:
cat("\014")
source("CollegeStudentsDataset.R")
# Set repeatable random seed
set.seed(4)
###################################################
# Partition data between training and testing sets
# Replace the following line with a function that partitions the data correctly
StudentsSplit <- PartitionExact(Students, fractionOfTest=0.4) # ********** Change here
TestStudents <- StudentsSplit$testingData
TrainStudents <-StudentsSplit$trainingData
###################################################
# Logistic Regression (glm, binomial)
# http://data.princeton.edu/R/glms.html
# http://www.statmethods.net/advstats/glm.html
# http://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html
# http://www.stat.umn.edu/geyer/5931/mle/glm.pdf
# Create logistic regression
glmmodel = glm(formula = formula, family = "binomial", data = TrainStudents)
# Predict the outcomes for the test data. (predict type="response")
predictedProbabilities.glm  = predict(glmmodel, newdata = TestStudents, type = "response")
###################################################
# Confusion Matrices for Logistic Regression
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.7
#Confusion Matrix for Logistic Regression
# convert the predicted probabilities to predictions using a threshold
predicted.GLM = ifelse(predictedProbabilities.glm > threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix for Logistic Regression")
# create a table to compare predicted values to actual values
print(table(predicted.GLM, actual, dnn = c("Predicted","Actual")))
####################################################
# Naive Bayes
# http://cran.r-project.org/web/packages/e1071/index.html
# http://cran.r-project.org/web/packages/e1071/e1071.pdf
# Get the algorithm
reposURL <- "http://cran.rstudio.com/"
# install package with naive bayes if not alreay installed
if (!require("e1071")) {install.packages("e1071", dep=TRUE, repos=reposURL)} else {" e1071 is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(e1071)
# Create Naive Bayes model
# ********** add code here
bayesModel = naiveBayes(formula = formula, data = TrainStudents)
# Predict the outcomes for the test data. (predict type="raw")
# ********** add code here
predictedProbabilities.bayes = predict(bayesModel, newdata = TestStudents,  type = "raw")
###################################################
#Confusion Matrix for Naive Bayes
# convert the predicted probabilities to predictions using a threshold
actual <- ifelse(TestStudents$CollegePlans, "Attend", "NotAttend")
threshold <- 0.7
predicted.Bayes = ifelse(predictedProbabilities.bayes[,2]>threshold, "Attend","NotAttend")
print(" ")
print(" -------------------------------- ")
print("Confusion Matrix Naive Bayes")
# create a table to compare predicted values to actual values
print(table(predicted.Bayes, actual, dnn = c("Predicted","Actual")))
